AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  AZMore:
    Description: tells us if we are going to have either 2 or 3 azs
    Default: "false"
    Type: String
    AllowedValues:
      - true
      - false
  ZookeeperInstanceType:
    Type: String
    Default: t2.small
    Description: intance type of your zookeeper node
    AllowedValues:
    - t1.micro
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m1.small
    - m1.medium
    - m1.large
    - m1.xlarge
    - m2.xlarge
    - m2.2xlarge
    - m2.4xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - c1.medium
    - c1.xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - g2.2xlarge
    - g2.8xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge
    - hi1.4xlarge
    - hs1.8xlarge
    - cr1.8xlarge
    - cc2.8xlarge
    - cg1.4xlarge
 
  RootVolumeSize:
    Type: Number
    Default: "100"
    Description: Root Volume size for your clickhouse instances

  ClickhouseInstanceType:
    Type:  String
    Default: t2.small
    Description: intance type of your zookeeper node
    AllowedValues:
    - t1.micro
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m1.small
    - m1.medium
    - m1.large
    - m1.xlarge
    - m2.xlarge
    - m2.2xlarge
    - m2.4xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - c1.medium
    - c1.xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - g2.2xlarge
    - g2.8xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge
    - hi1.4xlarge
    - hs1.8xlarge
    - cr1.8xlarge
    - cc2.8xlarge
    - cg1.4xlarge



Mappings:
  RegionMap:
    ap-south-1:
      cami: ami-0d7e19c9a4c3d4ed5
      zami: ami-0809f544f4823a3a0
    eu-north-1:
      cami: ami-055a231be6f12eaee
      zami: ami-09fc4efac65948697
    eu-west-3:
      cami: ami-04f0cdd8e15063c6b
      zami: ami-03ca5c2aa466c383c
    eu-west-2:
      cami: ami-09c614736c6dfa68c
      zami: ami-04bd48d131d3f2539
    eu-west-1:
      cami: ami-096dc8535587cbd51
      zami: ami-05262f77f4a58627b
    ap-northeast-3:
      cami: ami-0a432e63384a5ee99
      zami: ami-062b1b56757905e68
    ap-northeast-2:
      cami: ami-0749409d29397fe4b
      zami: ami-0afe4e17974ec8899
    ap-northeast-1:
      cami: ami-0987b97fbcfd9b2bc
      zami: ami-0feb004f34fbeb54b
    ca-central-1:
      cami: ami-0de5fe695bc332d06
      zami: ami-08b099378355c22e3
    sa-east-1:
      cami: ami-0fe26f086300f61a0
      zami: ami-0ff03ff99bb749a43
    ap-southeast-1:
      cami: ami-0a31c033685106ac0
      zami: ami-01f3d80c3cb33ce1f
    ap-southeast-2:
      cami: ami-05020854c833daf52
      zami: ami-0bf48169eb245e48b
    eu-central-1:
      cami: ami-021b0a52466d3683d
      zami: ami-0a560a935e9c50540
    us-east-1:
      cami: ami-029b7dd536a21b16f
      zami: ami-0ecb3ad5c6fa31e13
    us-east-2:
      cami: ami-029689e34bb285558
      zami: ami-0573190c8d06c5e52
    us-west-1:
      cami: ami-0ce8eb69d26bc273d
      zami: ami-0026a926c44ea96be
    us-west-2:
      cami: ami-0ccfdd1e2989dfd6f
      zami: ami-07f65c3bfa8f128d0



Conditions:
  CreateMoreSubnets: !Equals 
    - !Ref AZMore
    - "true"


Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
  NewKeyPair:
      Type: 'AWS::EC2::KeyPair'
      Properties:
          KeyName: !Join ['-', ['ClickhouseKeyPairName', !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    # Notice how you can't attach an IGW to a VPC unless both are created:
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.10.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list
      MapPublicIpOnLaunch: true       
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-A 
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.20.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the second AZ in the list 
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-B
  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Condition: CreateMoreSubnets
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.30.0/24
      AvailabilityZone: !Select [ 2, !GetAZs ]    # Get the second AZ in the list 
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-C    
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.50.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list 
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-A
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.60.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the second AZ in the list 
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-B      
  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Condition: CreateMoreSubnets
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.70.0/24
      AvailabilityZone: !Select [ 2, !GetAZs ]    # Get the second AZ in the list 
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-C            
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public
  PublicRoute1:   # Public route table has direct routing to IGW:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  NATGateway:
   Type: AWS::EC2::NatGateway
   Properties:
     AllocationId: !GetAtt ElasticIPAddress.AllocationId
     SubnetId: !Ref PublicSubnetA
     Tags:
     - Key: Name
       Value: !Sub NAT-${AWS::StackName}
  ElasticIPAddress:
   Type: AWS::EC2::EIP
   Properties:
     Domain: VPC
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private
  PrivateRoute1:            # Private route table can access web via NAT (created below)
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      # Route traffic through the NAT Gateway:
      NatGatewayId: !Ref NATGateway
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateMoreSubnets
    Properties:
      SubnetId: !Ref PublicSubnetC
      RouteTableId: !Ref PublicRouteTable    
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateMoreSubnets
    Properties:
      SubnetId: !Ref PrivateSubnetC
      RouteTableId: !Ref PrivateRouteTable    
  BastionHostSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH from 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0  
      VpcId: !Ref VPC
  ClickhouseSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP from 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '9000'
          ToPort: '9000'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0  
      VpcId: !Ref VPC    
  ZookeeperSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP from 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '2181'
          ToPort: '2181'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '2888'
          ToPort: '2888'
          CidrIp: 0.0.0.0/0  
        - IpProtocol: tcp
          FromPort: '3888'
          ToPort: '3888'
          CidrIp: 0.0.0.0/0    
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0  
      VpcId: !Ref VPC
  BastionHostNetworkInterface1:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref PublicSubnetA
      GroupSet: 
        - !Ref BastionHostSecurityGroup
  BastionHost: 
    Type: AWS::EC2::Instance
    DependsOn: BastionHostNetworkInterface1
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", "zami"]
      KeyName: !Ref NewKeyPair
      InstanceType: t2.micro
      NetworkInterfaces: 
        - NetworkInterfaceId: !Ref BastionHostNetworkInterface1
          DeviceIndex: "0"
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: 30
            DeleteOnTermination: true
            Encrypted: true    
      Tags:
       - Key: Name
         Value: bastion-host
  
  
  ZookeeperNetworkInterface1:
    DependsOn: ZookeeperNetworkInterface2
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref PrivateSubnetA
      GroupSet: 
        - !Ref ZookeeperSecurityGroup       
  ZookeeperEc2Instance1: 
    Type: AWS::EC2::Instance
    DependsOn: ZookeeperNetworkInterface1
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", "zami"]
      KeyName: !Ref NewKeyPair
      InstanceType: !Ref ZookeeperInstanceType
      UserData:
        Fn::Base64 : !Sub 
          - |
            #!/bin/bash -xe
            echo "hello-world"
            sudo sed -i -r "s/server-1-ip/0.0.0.0/" /usr/local/zookeeper/conf/zoo.cfg
            sudo sed -i -r "s/server-2-ip/${server_2}/" /usr/local/zookeeper/conf/zoo.cfg
            sudo sed -i -r "s/server-3-ip/${server_3}/" /usr/local/zookeeper/conf/zoo.cfg
            sudo ZK_SERVER_HEAP=128 /usr/local/zookeeper/bin/zkServer.sh start
          - server_2: !GetAtt ZookeeperNetworkInterface2.PrimaryPrivateIpAddress
            server_3: !GetAtt ZookeeperNetworkInterface3.PrimaryPrivateIpAddress
      NetworkInterfaces: 
        - NetworkInterfaceId: !Ref ZookeeperNetworkInterface1
          DeviceIndex: "0"
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: !Ref RootVolumeSize
            DeleteOnTermination: true
            Encrypted: true    
         
    
      Tags:
       - Key: Name
         Value: signoz-zookeeper-1
  

  ZookeeperNetworkInterface2:
    Type: AWS::EC2::NetworkInterface
    DependsOn: ZookeeperNetworkInterface3
    Properties:
      SubnetId: !Ref PrivateSubnetB
      GroupSet: 
        - !Ref ZookeeperSecurityGroup
  
  ZookeeperEc2Instance2: 
    Type: AWS::EC2::Instance
    DependsOn: ZookeeperNetworkInterface2
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", "zami"]

      InstanceType: !Ref ZookeeperInstanceType
      KeyName: !Ref NewKeyPair
      UserData:
        Fn::Base64 : !Sub 
          - |
            #!/bin/bash -xe
            echo "hello-world"
            sudo sed -i -r "s/server-1-ip/${server_1}/" /usr/local/zookeeper/conf/zoo.cfg
            sudo sed -i -r "s/server-2-ip/0.0.0.0/" /usr/local/zookeeper/conf/zoo.cfg
            sudo sed -i -r "s/server-3-ip/${server_3}/" /usr/local/zookeeper/conf/zoo.cfg
            sudo sed -i -r "s/1/2/" /var/lib/zookeeper/myid
            sudo ZK_SERVER_HEAP=128 /usr/local/zookeeper/bin/zkServer.sh start
          - server_1: !GetAtt ZookeeperNetworkInterface1.PrimaryPrivateIpAddress
            server_3: !GetAtt ZookeeperNetworkInterface3.PrimaryPrivateIpAddress
            
      NetworkInterfaces: 
        - NetworkInterfaceId: !Ref ZookeeperNetworkInterface2
          DeviceIndex: "0"
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: !Ref RootVolumeSize
            DeleteOnTermination: true
            Encrypted: true  
         
          
      Tags:
       - Key: Name
         Value: signoz-zookeeper-2                           
  ZookeeperNetworkInterface3:

    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId:
        'Fn::If':
          -  CreateMoreSubnets
          - !Ref PrivateSubnetC
          - !Ref PrivateSubnetA
        
      GroupSet: 
        - !Ref ZookeeperSecurityGroup
  
  
  ZookeeperEc2Instance3: 
    Type: AWS::EC2::Instance
    DependsOn: ZookeeperNetworkInterface3
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", "zami"]
      KeyName: !Ref NewKeyPair

      InstanceType: !Ref ZookeeperInstanceType
      UserData:
        Fn::Base64 : !Sub 
          - |
            #!/bin/bash -xe
            echo "hello-world"
            sudo sed -i -r "s/server-1-ip/${server_1}/" /usr/local/zookeeper/conf/zoo.cfg
            sudo sed -i -r "s/server-2-ip/${server_2}/" /usr/local/zookeeper/conf/zoo.cfg
            sudo sed -i -r "s/server-3-ip/0.0.0.0/" /usr/local/zookeeper/conf/zoo.cfg
            sudo sed -i -r "s/1/3/" /var/lib/zookeeper/myid
            sudo ZK_SERVER_HEAP=128 /usr/local/zookeeper/bin/zkServer.sh start
          - server_2: !GetAtt ZookeeperNetworkInterface2.PrimaryPrivateIpAddress
            server_1: !GetAtt ZookeeperNetworkInterface1.PrimaryPrivateIpAddress
      NetworkInterfaces: 
        - NetworkInterfaceId: !Ref ZookeeperNetworkInterface3
          DeviceIndex: "0"
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: !Ref RootVolumeSize
            DeleteOnTermination: true
            Encrypted: true          
      Tags:
       - Key: Name
         Value: signoz-zookeeper-3
  S3AccessRole:
    Type: AWS::IAM::Role
    Properties:
     
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Join ['-', ['s3fullacess', !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: s3:*
                Resource: '*'
  S3InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Path: /
      Roles: 
       - !Ref S3AccessRole
  Ec2NetworkInterfaceClickhouse1:
    DependsOn: ZookeeperEc2Instance1
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref PublicSubnetA
      GroupSet: 
        - !Ref ClickhouseSecurityGroup
  BackupBucket1:
    Type: AWS::S3::Bucket
    Description: Bucket to store clickhouse buckets
    Properties:
      LifecycleConfiguration:
        Rules:
          - Id: GlacierRule
            Prefix: glacier
            Status: Enabled
            ExpirationInDays: 365
            Transitions:
              - TransitionInDays: 15
                StorageClass: GLACIER
  EC2InstanceClickhouse1: 
    Type: AWS::EC2::Instance
    DependsOn: Ec2NetworkInterfaceClickhouse1
    Properties:
      IamInstanceProfile: !Ref S3InstanceProfile
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", "cami"]
      KeyName: !Ref NewKeyPair

      InstanceType:  !Ref ClickhouseInstanceType
      UserData:
        Fn::Base64 : !Sub 
          - |
            #!/bin/bash -xe
            echo "hello-world"
            sudo sed -i -r "s/shard-1-replica-1/${server_1}/" /etc/clickhouse-server/config.d/cluster.xml
            sudo sed -i -r "s/shard-2-replica-1/${server_2}/" /etc/clickhouse-server/config.d/cluster.xml
            sudo sed -i -r "s/shard-3-replica-1/${server_3}/" /etc/clickhouse-server/config.d/cluster.xml
            sudo sed -i -r "s/zookeeper-1-host/${z_1}/" /etc/clickhouse-server/config.d/cluster.xml
            sudo sed -i -r "s/zookeeper-2-host/${z_2}/" /etc/clickhouse-server/config.d/cluster.xml
            sudo sed -i -r "s/zookeeper-3-host/${z_3}/" /etc/clickhouse-server/config.d/cluster.xml
            sudo sed -i -r "s/shard-num/${s_num}/" /etc/clickhouse-server/config.d/macros.xml
            sudo sed -i -r "s/replica-num/${r_num}/" /etc/clickhouse-server/config.d/macros.xml
            sudo sed -i -r "s/bucket_name/${bucket_name}/" /etc/clickhouse-backup/config.yml
            sudo sed -i -r "s/bucket_region/${bucket_region}/" /etc/clickhouse-backup/config.yml
            sudo mv /etc/cron.daily/clickhouse-backup.sh /etc/cron.daily/clickhouse-backup
            sudo systemctl restart clickhouse-server
          - server_1: !GetAtt Ec2NetworkInterfaceClickhouse1.PrimaryPrivateIpAddress
            server_2: !GetAtt Ec2NetworkInterfaceClickhouse2.PrimaryPrivateIpAddress
            server_3: !GetAtt Ec2NetworkInterfaceClickhouse3.PrimaryPrivateIpAddress
            z_1: !GetAtt ZookeeperEc2Instance1.PrivateDnsName
            z_2: !GetAtt ZookeeperEc2Instance2.PrivateDnsName
            z_3: !GetAtt ZookeeperEc2Instance3.PrivateDnsName
            s_num: 1
            r_num: 1
            bucket_name: !Ref BackupBucket1
            bucket_region: !Ref "AWS::Region"


      NetworkInterfaces: 
        - NetworkInterfaceId: !Ref Ec2NetworkInterfaceClickhouse1
          DeviceIndex: "0"
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: !Ref RootVolumeSize
            DeleteOnTermination: true
            Encrypted: true    
      Tags:
       - Key: Name
         Value: signoz-clickhouse-1      

  Ec2NetworkInterfaceClickhouse2:
    DependsOn: Ec2NetworkInterfaceClickhouse1
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref PublicSubnetB
      GroupSet: 
        - !Ref ClickhouseSecurityGroup
  BackupBucket2:
    Type: AWS::S3::Bucket
    Description: Bucket to store clickhouse backups
    Properties:
      LifecycleConfiguration:
        Rules:
          - Id: GlacierRule
            Prefix: glacier
            Status: Enabled
            ExpirationInDays: 365
            Transitions:
              - TransitionInDays: 15
                StorageClass: GLACIER   
  EC2InstanceClickhouse2: 
    Type: AWS::EC2::Instance
    DependsOn: EC2InstanceClickhouse1
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", "cami"]
      IamInstanceProfile: !Ref S3InstanceProfile
      InstanceType: !Ref ClickhouseInstanceType
      KeyName: !Ref NewKeyPair
      UserData:
        Fn::Base64 : !Sub 
          - |
            #!/bin/bash -xe
            echo "hello-world"
            sudo sed -i -r "s/shard-1-replica-1/${server_1}/" /etc/clickhouse-server/config.d/cluster.xml
            sudo sed -i -r "s/shard-2-replica-1/${server_2}/" /etc/clickhouse-server/config.d/cluster.xml
            sudo sed -i -r "s/shard-3-replica-1/${server_3}/" /etc/clickhouse-server/config.d/cluster.xml
            sudo sed -i -r "s/zookeeper-1-host/${z_1}/" /etc/clickhouse-server/config.d/cluster.xml
            sudo sed -i -r "s/zookeeper-2-host/${z_2}/" /etc/clickhouse-server/config.d/cluster.xml
            sudo sed -i -r "s/zookeeper-3-host/${z_3}/" /etc/clickhouse-server/config.d/cluster.xml
            sudo sed -i -r "s/shard-num/${s_num}/" /etc/clickhouse-server/config.d/macros.xml
            sudo sed -i -r "s/replica-num/${r_num}/" /etc/clickhouse-server/config.d/macros.xml
            sudo sed -i -r "s/bucket_name/${bucket_name}/" /etc/clickhouse-backup/config.yml
            sudo sed -i -r "s/bucket_region/${bucket_region}/" /etc/clickhouse-backup/config.yml
            sudo mv /etc/cron.daily/clickhouse-backup.sh /etc/cron.daily/clickhouse-backup
            sudo systemctl restart clickhouse-server
          - server_1: !GetAtt Ec2NetworkInterfaceClickhouse1.PrimaryPrivateIpAddress
            server_2: !GetAtt Ec2NetworkInterfaceClickhouse2.PrimaryPrivateIpAddress
            server_3: !GetAtt Ec2NetworkInterfaceClickhouse3.PrimaryPrivateIpAddress
            z_1: !GetAtt ZookeeperEc2Instance1.PrivateDnsName
            z_2: !GetAtt ZookeeperEc2Instance2.PrivateDnsName
            z_3: !GetAtt ZookeeperEc2Instance3.PrivateDnsName
            s_num: 2
            r_num: 1
            bucket_name: !Ref BackupBucket2
            bucket_region: !Ref "AWS::Region"


      NetworkInterfaces: 
        - NetworkInterfaceId: !Ref Ec2NetworkInterfaceClickhouse2
          DeviceIndex: "0"
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: !Ref RootVolumeSize
            DeleteOnTermination: true
            Encrypted: true    
      Tags:
       - Key: Name
         Value: signoz-clickhouse-2   
  Ec2NetworkInterfaceClickhouse3:
    DependsOn: Ec2NetworkInterfaceClickhouse2
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId:
        'Fn::If':
          -  CreateMoreSubnets
          - !Ref PrivateSubnetC
          - !Ref PublicSubnetA
      GroupSet: 
        - !Ref ClickhouseSecurityGroup       
  BackupBucket3:
    Type: AWS::S3::Bucket
    Description: Bucket to store clickhouse backups
    Properties:
      LifecycleConfiguration:
        Rules:
          - Id: GlacierRule
            Prefix: glacier
            Status: Enabled
            ExpirationInDays: 365
            Transitions:
              - TransitionInDays: 15
                StorageClass: GLACIER
  EC2InstanceClickhouse3: 
    Type: AWS::EC2::Instance
    DependsOn: EC2InstanceClickhouse2
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", "cami"]
      KeyName: !Ref NewKeyPair
      IamInstanceProfile: !Ref S3InstanceProfile
      InstanceType: !Ref ClickhouseInstanceType
      UserData:
        Fn::Base64 : !Sub 
          - |
            #!/bin/bash -xe
            echo "hello-world"
            sudo sed -i -r "s/shard-1-replica-1/${server_1}/" /etc/clickhouse-server/config.d/cluster.xml
            sudo sed -i -r "s/shard-2-replica-1/${server_2}/" /etc/clickhouse-server/config.d/cluster.xml
            sudo sed -i -r "s/shard-3-replica-1/${server_3}/" /etc/clickhouse-server/config.d/cluster.xml
            sudo sed -i -r "s/zookeeper-1-host/${z_1}/" /etc/clickhouse-server/config.d/cluster.xml
            sudo sed -i -r "s/zookeeper-2-host/${z_2}/" /etc/clickhouse-server/config.d/cluster.xml
            sudo sed -i -r "s/zookeeper-3-host/${z_3}/" /etc/clickhouse-server/config.d/cluster.xml
            sudo sed -i -r "s/shard-num/${s_num}/" /etc/clickhouse-server/config.d/macros.xml
            sudo sed -i -r "s/replica-num/${r_num}/" /etc/clickhouse-server/config.d/macros.xml
            sudo sed -i -r "s/bucket_name/${bucket_name}/" /etc/clickhouse-backup/config.yml
            sudo sed -i -r "s/bucket_region/${bucket_region}/" /etc/clickhouse-backup/config.yml
            sudo mv /etc/cron.daily/clickhouse-backup.sh /etc/cron.daily/clickhouse-backup
            sudo systemctl restart clickhouse-server
          - server_1: !GetAtt Ec2NetworkInterfaceClickhouse1.PrimaryPrivateIpAddress
            server_2: !GetAtt Ec2NetworkInterfaceClickhouse2.PrimaryPrivateIpAddress
            server_3: !GetAtt Ec2NetworkInterfaceClickhouse3.PrimaryPrivateIpAddress
            z_1: !GetAtt ZookeeperEc2Instance1.PrivateDnsName
            z_2: !GetAtt ZookeeperEc2Instance2.PrivateDnsName
            z_3: !GetAtt ZookeeperEc2Instance3.PrivateDnsName
            s_num: 3
            r_num: 1
            bucket_name: !Ref BackupBucket3
            bucket_region: !Ref "AWS::Region"
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: !Ref RootVolumeSize
            DeleteOnTermination: true
            Encrypted: true          


      NetworkInterfaces: 
        - NetworkInterfaceId: !Ref Ec2NetworkInterfaceClickhouse3
          DeviceIndex: "0"
      Tags:
       - Key: Name
         Value: signoz-clickhouse-3          

  

Outputs:
  VpcId:
    Description: Id of the vpc created by cloudformation
    Value: !GetAtt VPC.VpcId
  ClickhouseDnsHost:
    Description: public dns of the ec2 instance
    Value:  !GetAtt EC2InstanceClickhouse3.PrivateDnsName
  PublicSubNetAId:
    Description: Id of public subnet A
    Value: !GetAtt PublicSubnetA.SubnetId
  PublicSubNetBId:
    Description: Id of public subnet b
    Value: !GetAtt PublicSubnetB.SubnetId
  PrivateSubNetAId:
    Description: Id of private subnet A
    Value: !GetAtt PrivateSubnetA.SubnetId
  PrivateSubNetBId:
    Description: Id of public subnet A
    Value: !GetAtt PrivateSubnetB.SubnetId      
  BackupBucket1:
    Description: bucket name of backup bucket 1
    Value: !Ref BackupBucket1
  BackupBucket2:
    Description: bucket name of backup bucket 2
    Value: !Ref BackupBucket2
  BackupBucket3:
    Description: bucket name of backup bucket 3
    Value: !Ref BackupBucket3   


